{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Drupal JavaScript SDK","text":"<p>Build modern JavaScript apps that connect to Drupal \u2014 fast and with minimal fuss. </p> <ul> <li> <p> Set up in 5 minutes</p> <p>Install, configure, and make your first request in minutes.</p> <p> Getting started</p> </li> <li> <p> Open Source, MIT</p> <p>Drupal JavaScript SDK is licensed under MIT and available on GitHub</p> <p> License</p> </li> <li> <p> Decoupled Drupal</p> <p>Tightly integrated with Drupal Core's Authentication, Menu &amp; Entity systems.</p> </li> <li> <p> JavaScript</p> <p>JavaScript API that works in NodeJS and Browser.</p> </li> </ul>"},{"location":"#why-this-sdk","title":"Why this SDK?","text":"<ul> <li> Simple core: Config, session, HTTP client</li> <li> Pick what you need: <code>@drupal-js-sdk/auth</code>, <code>@drupal-js-sdk/menu</code>, etc.</li> <li> Entities: <code>@drupal-js-sdk/entity</code> + adapters like <code>@drupal-js-sdk/jsonapi</code></li> <li> Typed: Strict TypeScript types and clear error primitives</li> </ul>"},{"location":"#install","title":"Install","text":"npmyarn Bash<pre><code>npm install drupal-js-sdk @drupal-js-sdk/auth\n# optional\nnpm install @drupal-js-sdk/entity @drupal-js-sdk/jsonapi\n</code></pre> Bash<pre><code>yarn add drupal-js-sdk @drupal-js-sdk/auth\n# optional\nyarn add @drupal-js-sdk/entity @drupal-js-sdk/jsonapi\n</code></pre>"},{"location":"#quick-start","title":"Quick start","text":"JavaScript<pre><code>import { DrupalSDK } from \"drupal-js-sdk\";\nimport { JsonApiEntityAdapter } from \"@drupal-js-sdk/jsonapi\";\n\nconst sdk = new DrupalSDK({ baseURL: \"https://example.com\" });\n\n// Auth\nawait sdk.auth.login(\"admin\", \"Z1ON0101\");\n\n// Entities via JSON:API\nsdk.entities.registerAdapter(\"jsonapi\", (ctx) =&gt; new JsonApiEntityAdapter(ctx));\nconst article = await sdk.entities\n  .entity({ entity: \"node\", bundle: \"article\" }, \"jsonapi\")\n  .load(\"123\");\n\n// Pagination\nconst { items, page } = await sdk.entities.node(\"article\").page({ limit: 5 }).listPage();\n</code></pre>"},{"location":"#explore-next","title":"Explore next","text":"<ul> <li>Intro &amp; Architecture</li> <li>Authentication</li> <li>Menus</li> </ul>"},{"location":"dev/architecture/","title":"System Architecture","text":""},{"location":"dev/architecture/#system-architecture-overview","title":"System Architecture Overview","text":"<p>This page provides a system-level view of the monorepo packages and their dependency relationships.</p> <p></p> Dependency Diagram <p>Key points:</p> <ul> <li><code>@drupal-js-sdk/interfaces</code> defines shared types and contracts.</li> <li><code>@drupal-js-sdk/core</code> wires configuration, session, and HTTP client.</li> <li>Transport is provided by <code>@drupal-js-sdk/xhr</code> via <code>FetchClient</code> or <code>AxiosClient</code>.</li> <li>Feature packages (<code>auth</code>, <code>entity</code>, <code>jsonapi</code>, <code>menu</code>) consume <code>core</code> and <code>interfaces</code>.</li> <li><code>@drupal-js-sdk/error</code> centralizes error definitions used across layers.</li> </ul>"},{"location":"dev/onboarding/","title":"Onboarding","text":""},{"location":"dev/onboarding/#onboarding-for-contributors","title":"Onboarding for Contributors","text":"<p>Quick orientation to the codebase and development flow.</p>"},{"location":"dev/onboarding/#monorepo-layout","title":"Monorepo layout","text":"<ul> <li><code>packages/</code> contains publishable packages (core, interfaces, xhr, storage, auth, entity, jsonapi, menu, error).</li> <li><code>drupal-js-sdk/</code> package re-exports most public APIs for convenience.</li> <li><code>docs/</code> MkDocs site with guides and module docs.</li> </ul>"},{"location":"dev/onboarding/#build-and-test","title":"Build and test","text":"<ul> <li>Install: <code>pnpm i</code></li> <li>Build all: <code>pnpm -r build</code></li> <li>Test all: <code>pnpm -r test</code></li> <li>Lint: <code>pnpm -r lint</code></li> </ul>"},{"location":"dev/onboarding/#key-packages","title":"Key packages","text":"<ul> <li><code>@drupal-js-sdk/interfaces</code>: shared types and contracts.</li> <li><code>@drupal-js-sdk/core</code>: wires config, session and transport; exposes <code>Drupal</code>.</li> <li><code>@drupal-js-sdk/xhr</code>: <code>FetchClient</code> and <code>AxiosClient</code> implementing <code>XhrInterface</code>.</li> <li><code>@drupal-js-sdk/auth</code>: <code>DrupalAuth</code> (login/logout, session token, CSRF header).</li> <li><code>@drupal-js-sdk/entity</code> + <code>@drupal-js-sdk/jsonapi</code>: entity loading via adapters.</li> </ul>"},{"location":"dev/onboarding/#development-tips","title":"Development tips","text":"<ul> <li>Prefer <code>interfaces</code> types over widening types to keep boundaries clean.</li> <li><code>DrupalError</code> should be thrown from transport boundaries for consistent error handling.</li> <li>For browser apps, set session via <code>drupal.setSessionService(new StorageInWeb())</code>.</li> </ul> <p>See also:</p> <ul> <li>System Architecture</li> <li>Runtime Architecture</li> <li>Login Sequence</li> </ul>"},{"location":"dev/runtime/","title":"Runtime","text":"","tags":["draft"]},{"location":"dev/runtime/#runtime-component-architecture","title":"Runtime Component Architecture","text":"<pre><code>graph LR\n  subgraph Runtime Context\n    Drupal[\"Drupal (extends Core)\n    - config: StorageInterface\n    - client: XhrInterface\n    - session: SessionInterface\"]\n    Core[\"Core\n    - getClientService()\n    - getConfigService()\n    - getSessionService()\"]\n    Config[\"Config (StorageInMemory)\"]\n    Xhr[\"XHR Clients\n    - FetchClient\n    - AxiosClient\"]\n    Error[\"DrupalError\"]\n    Storage[\"Storage\n    - StorageInMemory\n    - StorageInWeb\"]\n    Auth[\"DrupalAuth\n    - login/logout\n    - csrftoken/session\"]\n    EntitySvc[\"EntityService\n    - registerAdapter\n    - entity(id) \u2192 EntityLoader\"]\n    EntityLoader[\"EntityLoader\n    - load(id)\"]\n    JsonApiAdapter[\"JsonApiEntityAdapter\n    - load \u2192 client.call(GET)\"]\n  end\n\n  Drupal --&gt;|init| Xhr\n  Drupal --&gt;|uses| Core\n  Core --&gt;|wraps| Config\n  Core --&gt;|provides| Xhr\n  Core --&gt;|provides| Storage\n\n  Auth --&gt;|uses| Drupal\n  Auth --&gt;|calls| Xhr\n  Auth --&gt;|sets| Storage\n  Auth --&gt;|adds headers| Xhr\n\n  EntitySvc --&gt;|uses| Core\n  EntitySvc --&gt;|creates| EntityLoader\n  JsonApiAdapter --&gt;|calls| Xhr\n  EntityLoader --&gt;|uses| JsonApiAdapter\n\n  Xhr --&gt;|errors| Error\n  Storage --&gt;|errors| Error</code></pre> <p>Note</p> <ul> <li><code>Drupal</code> composes the HTTP client and exposes it via <code>Core.getClientService()</code>.</li> <li><code>DrupalAuth</code> persists CSRF/logout tokens in session storage and injects the <code>X-CSRF-Token</code> header via <code>XhrInterface.addDefaultHeaders()</code>.</li> <li>Entities are accessed through <code>EntityService</code> which instantiates an adapter (default: JSON:API).</li> </ul>","tags":["draft"]},{"location":"dev/runtime/#erd-entity-relationship-view","title":"ERD (Entity-Relationship) View","text":"<pre><code>---\nconfig:\n  theme: redux-color\n  look: neo\n---\nerDiagram\n  DRUPAL ||--|| CORE : \"extends\"\n  CORE ||--|| CONFIG : \"wraps\"\n  CORE ||--o{ XHR : \"provides\"\n  CORE ||--o{ STORAGE : \"provides\"\n  DRUPAL ||--o{ XHR : \"init client\"\n\n  DRUPALAUTH }|..|| DRUPAL : \"uses\"\n  DRUPALAUTH }o..o{ XHR : \"calls\"\n  DRUPALAUTH }o..|| STORAGE : \"persists\"\n\n  ENTITYSERVICE }|..|| CORE : \"uses\"\n  ENTITYSERVICE ||--o{ ENTITYLOADER : \"creates\"\n  ENTITYLOADER }|..|| JSONAPIADAPTER : \"uses\"\n  JSONAPIADAPTER }o..o{ XHR : \"calls\"\n\n  XHR }o..|| DRUPALERROR : \"throws\"\n  STORAGE }o..|| DRUPALERROR : \"throws\"\n\n  DRUPAL {\n    string baseURL\n    string client\n    string config\n    string session\n  }\n  CORE {\n    string config\n  }\n  CONFIG {\n    string data\n  }\n  XHR {\n    string impl\n  }\n  STORAGE {\n    string impl\n  }\n  DRUPALAUTH {\n    string csrf_token\n    string logout_token\n    string current_user\n  }\n  ENTITYSERVICE {\n    string defaultAdapterKey\n  }\n  ENTITYLOADER {\n    string operation\n  }\n  JSONAPIADAPTER {\n    string operation\n  }\n  DRUPALERROR {\n    int code\n    string message\n  }</code></pre>","tags":["draft"]},{"location":"dev/sequence-login/","title":"Sequence login","text":"","tags":["draft"]},{"location":"dev/sequence-login/#login-and-session-flow","title":"Login and Session Flow","text":"<pre><code>sequenceDiagram\n  autonumber\n  participant App as App Code\n  participant Drupal as Drupal(Core)\n  participant XHR as XhrInterface (Fetch/Axios)\n  participant Auth as DrupalAuth\n  participant Storage as Session Storage\n  participant Server as Drupal Backend\n\n  App-&gt;&gt;Drupal: new Drupal({ baseURL, headers, auth? })\n  Note right of Drupal: initialize() \u2192 setClientService(FetchClient)\n\n  App-&gt;&gt;Drupal: drupal.setSessionService(StorageInWeb)\n\n  App-&gt;&gt;Auth: new DrupalAuth(drupal)\n  Auth-&gt;&gt;Drupal: getClientService(), getSessionService()\n  Auth-&gt;&gt;XHR: GET /session/token (withCredentials)\n  XHR-&gt;&gt;Server: GET /session/token\n  Server--&gt;&gt;XHR: 200 OK, token\n  XHR--&gt;&gt;Auth: XhrResponse(data=csrf_token)\n  Auth-&gt;&gt;Storage: setItem(DRUPAL_AUTH.SESSION, {..., csrf_token})\n  Auth-&gt;&gt;XHR: addDefaultHeaders({ 'X-CSRF-Token': token })\n\n  App-&gt;&gt;Auth: login(name, pass)\n  Auth-&gt;&gt;XHR: POST /user/login {_format=json, data}\n  XHR-&gt;&gt;Server: POST /user/login\n  alt Success\n    Server--&gt;&gt;XHR: 200 OK, { csrf_token, logout_token, current_user }\n    XHR--&gt;&gt;Auth: XhrResponse(data)\n    Auth-&gt;&gt;Storage: setItem(DRUPAL_AUTH.SESSION, data)\n    Auth-&gt;&gt;XHR: addDefaultHeaders({ 'X-CSRF-Token': data.csrf_token })\n  else Error\n    Server--&gt;&gt;XHR: 4xx/5xx, body/text\n    XHR--&gt;&gt;App: throw DrupalError from Client.getDrupalError()\n  end\n\n  App-&gt;&gt;Drupal: drupal.getClientService().call('GET', '/jsonapi/node/article/&lt;id&gt;')\n  XHR-&gt;&gt;Server: GET /jsonapi/node/article/&lt;id&gt;\n  Server--&gt;&gt;XHR: 200 OK, JSON:API document\n  XHR--&gt;&gt;App: XhrResponse(data)</code></pre>","tags":["draft"]},{"location":"guide/authentication/","title":"Authentication","text":"<p>Default authentication service is provided via <code>DrupalAuth</code>. It helps perform cookie-based authentication with a Drupal backend.</p>"},{"location":"guide/authentication/#session-storage","title":"Session storage","text":"<p>Authentication needs a session storage implementation. Examples:</p>"},{"location":"guide/authentication/#memory","title":"Memory","text":"<p>Node or Browser</p> JavaScript<pre><code>import { DrupalSDK } from \"drupal-js-sdk\";\nimport { StorageInMemory } from \"@drupal-js-sdk/storage\";\n\nconst sdk = new DrupalSDK({ baseURL: \"http://example.com\" });\nconst sessionStorage = new StorageInMemory();\nsdk.setSessionService(sessionStorage);\nconst auth = sdk.auth;\n</code></pre>"},{"location":"guide/authentication/#localstorage-browser","title":"localStorage (Browser)","text":"JavaScript<pre><code>import { DrupalSDK } from \"drupal-js-sdk\";\nimport { StorageInWeb } from \"@drupal-js-sdk/storage\";\n\nconst sdk = new DrupalSDK({ baseURL: \"http://example.com\" });\nconst sessionStorage = new StorageInWeb(() =&gt; window.localStorage);\nsdk.setSessionService(sessionStorage);\nconst auth = sdk.auth;\n</code></pre>"},{"location":"guide/authentication/#sessionstorage-browser","title":"sessionStorage (Browser)","text":"JavaScript<pre><code>import { DrupalSDK } from \"drupal-js-sdk\";\nimport { StorageInWeb } from \"@drupal-js-sdk/storage\";\n\nconst sdk = new DrupalSDK({ baseURL: \"http://example.com\" });\nconst sessionStorage = new StorageInWeb(() =&gt; window.sessionStorage);\nsdk.setSessionService(sessionStorage);\nconst auth = sdk.auth;\n</code></pre>"},{"location":"guide/authentication/#login-status","title":"Login status","text":"JavaScript<pre><code>let logged_in = false;\nauth\n  .loginStatus()\n  .then((status) =&gt; (logged_in = status))\n  .catch(() =&gt; {\n    // Display message that login status check failed.\n  });\n</code></pre>"},{"location":"guide/authentication/#login","title":"Login","text":"JavaScript<pre><code>let user_info = {};\nauth\n  .login(\"admin\", \"Z1ON0101\")\n  .then((data) =&gt; (user_info = data))\n  .catch(() =&gt; {\n    // Display message that login failed.\n  });\n</code></pre>"},{"location":"guide/authentication/#logout-experimental","title":"Logout (experimental)","text":"JavaScript<pre><code>let logged_in = true;\nauth\n  .logout()\n  .then(() =&gt; {\n    logged_in = false;\n  })\n  .catch(() =&gt; {\n    // Display message that logout failed.\n  });\n</code></pre>"},{"location":"guide/authentication/#password-reset-experimental","title":"Password Reset (experimental)","text":"<p>Password reset request using username:</p> JavaScript<pre><code>auth\n  .passwordResetByUserName(\"admin\")\n  .then(() =&gt; {\n    // Password reset request accepted.\n  })\n  .catch(() =&gt; {\n    // Display message that password reset failed.\n  });\n</code></pre> <p>Password reset request using email:</p> JavaScript<pre><code>auth\n  .passwordResetByMail(\"admin@example.com\")\n  .then(() =&gt; {\n    // Password reset request accepted.\n  })\n  .catch(() =&gt; {\n    // Display message that password reset failed.\n  });\n</code></pre>"},{"location":"guide/authentication/#register-experimental","title":"Register (experimental)","text":"<p>Some Drupal-side configuration is required:</p> <ul> <li>Install and enable the <code>restui</code> module</li> <li>Enable the User registration resource (POST /user/register)</li> <li>Configure accepted formats and authentication (cookie)</li> <li>Grant \"Access POST on User registration resource\" to Anonymous users</li> </ul> JavaScript<pre><code>let user_info = {};\nauth\n  .register(\"admin\", \"admin@example.com\")\n  .then((data) =&gt; {\n    // Successfully registered\n    user_info = data;\n  })\n  .catch(() =&gt; {\n    // Display message that registration failed.\n  });\n</code></pre>"},{"location":"guide/authentication/#references","title":"References","text":"<ul> <li>Additional RPC endpoints change record: https://www.drupal.org/node/2720655</li> <li>REST getting started: https://www.drupal.org/docs/8/core/modules/rest/1-getting-started-rest-configuration-rest-request-fundamentals</li> <li>Anonymous users can register via REST (Change record): https://www.drupal.org/node/2752071</li> <li>restui module: https://www.drupal.org/project/restui</li> </ul>"},{"location":"guide/cors/","title":"CORS","text":""},{"location":"guide/cors/#cross-origin-resource-sharing-cors","title":"Cross-Origin Resource Sharing (CORS)","text":"<p>CORS is a browser security feature that restricts cross-origin HTTP requests initiated from scripts running in the browser. This guide explains how to enable CORS in your Drupal backend and how to configure the SDK on the client.</p>"},{"location":"guide/cors/#client-example","title":"Client example","text":"JavaScript<pre><code>import { DrupalSDK } from \"drupal-js-sdk\";\nimport { FetchClient } from \"@drupal-js-sdk/xhr\";\n\nconst sdk = new DrupalSDK({ baseURL: \"https://example.com\" });\n// Optional: override client\nsdk.setClientService(new FetchClient({ baseURL: \"https://example.com\" }));\n</code></pre>"},{"location":"guide/cors/#what-and-why","title":"What and Why?","text":"<p>Cross-Origin Resource Sharing (CORS)<sup>1</sup> controls which websites can call your Drupal backend from the browser. If your frontend runs on a different origin (scheme/host/port), you must enable and configure CORS on the Drupal side.</p>"},{"location":"guide/cors/#configure-drupal-servicesyml","title":"Configure Drupal (services.yml)","text":"<p>CORS in Drupal is configured<sup>2</sup> in <code>sites/default/services.yml</code> (or an environment-specific override).</p> Example <p>Minimal example (GET only, public APIs):</p> YAML<pre><code># sites/default/services.yml\ncors.config:\n  enabled: true\n  allowedOrigins: ['http://localhost:5173']\n  allowedHeaders: ['x-requested-with', 'content-type', 'accept']\n  allowedMethods: ['GET', 'OPTIONS']\n  exposedHeaders: []\n  maxAge: 86400\n  supportsCredentials: false\n</code></pre> <p>Cookie/session-based example (credentials, unsafe methods): YAML<pre><code>  # sites/default/services.yml\n  cors.config:\n    enabled: true\n    allowedHeaders: ['x-csrf-token','authorization','content-type','accept','origin','x-requested-with', 'access-control-allow-origin','x-allowed-header']\n    allowedMethods: ['POST', 'GET', 'OPTIONS', 'DELETE', 'PUT', 'PATCH']\n    allowedOrigins: ['http://localhost:5173']\n    allowedOriginsPatterns: []\n    exposedHeaders:  []\n    maxAge: false\n    supportsCredentials: true\n</code></pre></p> <p>Tip</p> <p>For testing, you can use regex pattern for allowed origins on your developemnt server.</p> YAML<pre><code>  # sites/default/services.yml\n  cors.config:\n    enabled: true\n    allowedHeaders: ['x-csrf-token','authorization','content-type','accept','origin','x-requested-with', 'access-control-allow-origin','x-allowed-header']\n    allowedMethods: ['POST', 'GET', 'OPTIONS', 'DELETE', 'PUT', 'PATCH']\n    allowedOrigins: []\n    allowedOriginsPatterns: [\n      # To allow all subdomains in example.com.\n      '#^http://[a-z-]*\\.example.com$#',\n      # To allow all localhost and all ports.\n      '#^http(s)?://(.+\\.)?localhost(:\\d{1,5})?$#',\n    ]\n    exposedHeaders:  []\n    maxAge: false\n    supportsCredentials: true\n</code></pre> <p>Warning</p> <p>Wildcard origins + credentials</p> <p>Browsers reject <code>Access-Control-Allow-Origin: *</code> when <code>Access-Control-Allow-Credentials: true</code>. Use explicit origins (exact host, protocol and port).</p> <p>Tip</p> <p>CSRF tokens for write requests</p> <p>For <code>POST/PATCH/DELETE</code>, include an <code>X-CSRF-Token</code> header. Drupal exposes a token endpoint at <code>/session/token</code> by default.</p>"},{"location":"guide/cors/#frontend-configuration","title":"Frontend configuration","text":"SDK (FetchClient)Fetch API (vanilla)Axios JavaScript<pre><code>import { Drupal } from \"drupal-js-sdk\";\nimport { FetchClient } from \"@drupal-js-sdk/xhr\";\n\nconst client = new FetchClient({ baseURL: \"https://api.example.com\", withCredentials: true });\nconst drupal = new Drupal({ baseURL: \"https://api.example.com\" });\n\ndrupal.setClientService(client);\n</code></pre> JavaScript<pre><code>// Include credentials for cookie-based auth\nawait fetch(\"https://api.example.com/jsonapi/node/article\", {\n  method: \"GET\",\n  credentials: \"include\", // important\n  headers: { \"Accept\": \"application/vnd.api+json\" }\n});\n</code></pre> JavaScript<pre><code>import axios from \"axios\";\n\nconst api = axios.create({\n  baseURL: \"https://api.example.com\",\n  withCredentials: true, // important\n});\n\nawait api.get(\"/jsonapi/node/article\");\n</code></pre> <p>Note</p> <p>SameSite cookies</p> Text Only<pre><code>When using cross-site cookies, ensure your session cookie is set with `SameSite=None; Secure` and served over HTTPS. Otherwise, browsers will not send the cookie.\n</code></pre>"},{"location":"guide/cors/#getting-a-csrf-token-drupal","title":"Getting a CSRF token (Drupal)","text":"JavaScript<pre><code>const res = await fetch(\"https://api.example.com/session/token\", {\n  credentials: \"include\",\n});\nconst token = await res.text();\n\nawait fetch(\"https://api.example.com/jsonapi/node/article\", {\n  method: \"POST\",\n  credentials: \"include\",\n  headers: {\n    \"Content-Type\": \"application/vnd.api+json\",\n    \"X-CSRF-Token\": token,\n  },\n  body: JSON.stringify({\n    data: {\n      type: \"node--article\",\n      attributes: { title: \"Hello world\" },\n    },\n  }),\n});\n</code></pre>"},{"location":"guide/cors/#verify-and-troubleshoot","title":"Verify and troubleshoot","text":"<ul> <li>Preflight (OPTIONS) must succeed with:</li> <li><code>Access-Control-Allow-Origin</code> matching your exact origin</li> <li><code>Access-Control-Allow-Methods</code> including the intended verb</li> <li><code>Access-Control-Allow-Headers</code> including custom headers (e.g., <code>authorization</code>, <code>x-csrf-token</code>)</li> <li> <p><code>Access-Control-Allow-Credentials: true</code> if using cookies</p> </li> <li> <p>Quick checks:</p> </li> <li>Origins must match (protocol + host + port). <code>http://localhost:5173</code> \u2260 <code>http://localhost:3000</code>.</li> <li>Don\u2019t use <code>*</code> with credentials.</li> <li>Ensure reverse proxies/CDNs preserve the <code>Origin</code> header and CORS response headers.</li> <li> <p>Clear caches (<code>drush cr</code>) after changing <code>services.yml</code>.</p> </li> <li> <p>Curl preflight example:</p> </li> </ul> Bash<pre><code>curl -i -X OPTIONS \\\n  -H \"Origin: https://app.example.com\" \\\n  -H \"Access-Control-Request-Method: POST\" \\\n  -H \"Access-Control-Request-Headers: content-type, x-csrf-token\" \\\n  https://api.example.com/jsonapi/node/article\n</code></pre>"},{"location":"guide/cors/#common-pitfalls","title":"Common pitfalls","text":"<ul> <li>Using <code>*</code> for origins while sending cookies or Authorization</li> <li>Missing <code>OPTIONS</code> in <code>allowedMethods</code></li> <li>Forgetting <code>authorization</code> or <code>x-csrf-token</code> in <code>allowedHeaders</code></li> <li>Cookie <code>SameSite=Lax</code> preventing cross-site requests (use <code>SameSite=None; Secure</code> over HTTPS)</li> </ul> <ol> <li> <p>Cross-Origin Resource Sharing (CORS): https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS \u21a9</p> </li> <li> <p>Opt-in CORS support (Change record on Drupal.org): https://www.drupal.org/node/2715637 \u21a9</p> </li> </ol>"},{"location":"guide/error-codes/","title":"Error Codes","text":"<p>The following is a list of all the error codes that can be returned by the Drupal Javascript SDK API. You may also refer to RFC2616<sup>1</sup> for a list of http error codes. Make sure to check the error message for more details.</p> <p>Warning</p> <p>Not all error codes listed below are implemented. For now, this serves as a guide for developers for implementing a standardised set of error codes.</p> CONSTANT NUMERIC CODE DESCRIPTION UNDEFINED -1 Error code indicating some error other than those enumerated here. INTERNAL_SERVER_ERROR 1 Error code indicating that something has gone wrong with the server. MISSING_IMPLEMENTATION_ERROR 42 Error code indicating the sdk has encountered a missing implementation. CONNECTION_FAILED 100 Error code indicating the connection to the Drupal server failed. OBJECT_NOT_FOUND 101 Error code indicating the specified object doesn't exist. INVALID_QUERY 102 Error code indicating you tried to query with a datatype that doesn't INVALID_CLASS_NAME 103 Error code indicating a missing or invalid classname. Classnames are the only valid characters. MISSING_OBJECT_ID 104 Error code indicating an unspecified object id. INVALID_KEY_NAME 105 Error code indicating an invalid key name. Keys are case-sensitive. Theys. INVALID_POINTER 106 Error code indicating a malformed pointer. You should not see this unless INVALID_JSON 107 Error code indicating that badly formed JSON was received upstream. This things encode to JSON, or the network is failing badly. COMMAND_UNAVAILABLE 108 Error code indicating that the feature you tried to access is only NOT_INITIALIZED 109 You must call Drupal.initialize before using the Drupal library. INCORRECT_TYPE 111 Error code indicating that a field was set to an inconsistent type. INVALID_CHANNEL_NAME 112 Error code indicating an invalid channel name. A channel name is either characters and starts with a letter. PUSH_MISCONFIGURED 115 Error code indicating that push is misconfigured. OBJECT_TOO_LARGE 116 Error code indicating that the object is too large. OPERATION_FORBIDDEN 119 Error code indicating that the operation isn't allowed for clients. CACHE_MISS 120 Error code indicating the result was not found in the cache. INVALID_NESTED_KEY 121 Error code indicating that an invalid key was used in a nested INVALID_FILE_NAME 122 Error code indicating that an invalid filename was used for DrupalFile.n 1 and 128 characters. INVALID_ACL 123 Error code indicating an invalid ACL was provided. TIMEOUT 124 Error code indicating that the request timed out on the server. Typically INVALID_EMAIL_ADDRESS 125 Error code indicating that the email address was invalid. MISSING_CONTENT_TYPE 126 Error code indicating a missing content type. MISSING_CONTENT_LENGTH 127 Error code indicating a missing content length. INVALID_CONTENT_LENGTH 128 Error code indicating an invalid content length. FILE_TOO_LARGE 129 Error code indicating a file that was too large. FILE_SAVE_ERROR 130 Error code indicating an error saving a file. DUPLICATE_VALUE 137 Error code indicating that a unique field was given a value that is INVALID_ROLE_NAME 139 Error code indicating that a role's name is invalid. EXCEEDED_QUOTA 140 Error code indicating that an application quota was exceeded. Upgrade to SCRIPT_FAILED 141 Error code indicating that a Cloud Code script failed. VALIDATION_ERROR 142 Error code indicating that a Cloud Code validation failed. INVALID_IMAGE_DATA 143 Error code indicating that invalid image data was provided. UNSAVED_FILE_ERROR 151 Error code indicating an unsaved file. INVALID_PUSH_TIME_ERROR 152 Error code indicating an invalid push time. FILE_DELETE_ERROR 153 Error code indicating an error deleting a file. FILE_DELETE_UNNAMED_ERROR 161 Error code indicating an error deleting an unnamed file. REQUEST_LIMIT_EXCEEDED 155 Error code indicating that the application has exceeded its request DUPLICATE_REQUEST 159 Error code indicating that the request was a duplicate and has been discarded due to INVALID_EVENT_NAME 160 Error code indicating an invalid event name. INVALID_VALUE 162 Error code indicating that a field had an invalid value. USERNAME_MISSING 200 Error code indicating that the username is missing or empty. PASSWORD_MISSING 201 Error code indicating that the password is missing or empty. USERNAME_TAKEN 202 Error code indicating that the username has already been taken. EMAIL_TAKEN 203 Error code indicating that the email has already been taken. EMAIL_MISSING 204 Error code indicating that the email is missing, but must be specified. EMAIL_NOT_FOUND 205 Error code indicating that a user with the specified email was not found. SESSION_MISSING 206 Error code indicating that a user object without a valid session could MUST_CREATE_USER_THROUGH_SIGNUP 207 Error code indicating that a user can only be created through signup. ACCOUNT_ALREADY_LINKED 208 Error code indicating that an an account being linked is already linked INVALID_SESSION_TOKEN 209 Error code indicating that the current session token is invalid. MFA_ERROR 210 Error code indicating an error enabling or verifying MFA MFA_TOKEN_REQUIRED 211 Error code indicating that a valid MFA token must be provided LINKED_ID_MISSING 250 Error code indicating that a user cannot be linked to an account because INVALID_LINKED_SESSION 251 Error code indicating that a user with a linked (e.g. Facebook) account UNSUPPORTED_SERVICE 252 Error code indicating that a service being linked (e.g. Facebook or INVALID_SCHEMA_OPERATION 255 Error code indicating an invalid operation occured on schema AGGREGATE_ERROR 600 Error code indicating that there were multiple errors. Aggregate errorsore detail about each error that occurred. FILE_READ_ERROR 601 Error code indicating the client was unable to read an input file. X_DOMAIN_REQUEST 602 Error code indicating a real error code is unavailable becausets in Internet Explorer, which strips the body from HTTP responses that have a non-2XX status code. STORAGE_IN_MEMORY_FAIL 700 Error code indicating in memory storage failure. STORAGE_IN_WEB_FAIL 701 Error code indicating in web storage failure. <ol> <li> <p>RFC2616, Hypertext Transfer Protocol -- HTTP/1.1 : https://datatracker.ietf.org/doc/html/rfc2616 \u21a9</p> </li> </ol>"},{"location":"guide/error-handling/","title":"Error Handling","text":"<p>Most of SDK's functions report their success or failure using an object with callbacks.</p> JavaScript<pre><code>auth\n  .passwordResetByMail(\"admin@example.com\")\n  .then(() =&gt; {\n    // This function will *not* be called in case of `Error`.\n  })\n  .catch((error) =&gt; {\n    // This will be called.\n    // error is an instance of DrupalError with details about the error.\n    if (error.getErrorCode() === DrupalError.CONNECTION_FAILED) {\n      alert(\"Uh oh, connection failed! please try again later.\");\n    }\n    if (error.getErrorCode() === DrupalError.INVALID_JSON) {\n      alert(\n        \"Uh oh, recieved invalid response from server! \\\n            Please contact administrator.\"\n      );\n    }\n  });\n</code></pre> <p>For a list of all possible DrupalError codes, check Error Codes, or see the DrupalError section of the JavaScript API DrupalError.</p>"},{"location":"guide/getting-started/","title":"Getting Started","text":"<p>Install the SDK and optional packages you need.</p>"},{"location":"guide/getting-started/#install","title":"Install","text":"Bash<pre><code>npm install drupal-js-sdk @drupal-js-sdk/auth\n# Optional for entities via JSON:API\nnpm install @drupal-js-sdk/entity @drupal-js-sdk/jsonapi\n</code></pre>"},{"location":"guide/getting-started/#basic-usage","title":"Basic usage","text":"JavaScript<pre><code>import { DrupalSDK } from \"drupal-js-sdk\";\n\nconst sdk = new DrupalSDK({ baseURL: \"https://example.com\" });\n// Access feature modules via facade\nsdk.auth; // DrupalAuth\nsdk.menu; // DrupalMenu\nsdk.entities; // DrupalEntity facade/service\n</code></pre>"},{"location":"guide/getting-started/#entities-opt-in","title":"Entities (opt-in)","text":"JavaScript<pre><code>import { DrupalSDK } from \"drupal-js-sdk\";\nimport { JsonApiEntityAdapter } from \"@drupal-js-sdk/jsonapi\";\n\nconst sdk = new DrupalSDK({ baseURL: \"https://example.com\" });\n// Register adapter once (if not already)\nsdk.entities.registerAdapter(\"jsonapi\", (ctx) =&gt; new JsonApiEntityAdapter(ctx));\n\n// Load node--article:123\nconst article = await sdk.entities\n  .entity({ entity: \"node\", bundle: \"article\" }, \"jsonapi\")\n  .load(\"123\");\n\n// Fluent builder with filters/sort and params interop\nconst list = await sdk.entities\n  .node(\"article\")\n  .select([\"title\", \"created\"])\n  .include([\"uid\"])\n  .whereContains(\"title\", \"hello\")\n  .sort(\"created\", \"DESC\")\n  .page({ limit: 10 })\n  .list();\n\n// drupal-jsonapi-params interop (duck-typed)\n// sdk.entities.node('article').fromParams(new DrupalJsonApiParams().addFilter('status', '1')).list();\n\n// Pagination result\nconst { items, page } = await sdk.entities.node(\"article\").page({ limit: 5 }).listPage();\n</code></pre>"},{"location":"guide/introduction/","title":"Introduction","text":"<p>The Drupal JavaScript SDK provides a small core, optional feature packages, and a high-level facade to build decoupled frontends quickly.</p> JavaScript<pre><code>import { DrupalSDK } from \"drupal-js-sdk\";\n\nconst sdk = new DrupalSDK({ baseURL: \"https://example.com\" });\n</code></pre> <p>Next, follow the Getting started guide for install and setup.</p>"},{"location":"guide/introduction/#how-its-structured","title":"How it\u2019s structured","text":"<ul> <li><code>@drupal-js-sdk/core</code>: wires config, session, and transport; exposes <code>Drupal</code>.</li> <li><code>@drupal-js-sdk/xhr</code>: <code>FetchClient</code> and <code>AxiosClient</code> implementations.</li> <li><code>@drupal-js-sdk/auth</code>: login/logout, CSRF/session management.</li> <li><code>@drupal-js-sdk/entity</code> + <code>@drupal-js-sdk/jsonapi</code>: adapter-based entity access.</li> <li><code>@drupal-js-sdk/storage</code>: in-memory and web storage utilities.</li> <li><code>@drupal-js-sdk/error</code>: typed errors shared across packages.</li> </ul> <p>Use the umbrella package <code>drupal-js-sdk</code> to import common pieces, or install individual packages as needed.</p>"},{"location":"guide/introduction/#compatibility","title":"Compatibility","text":"<ul> <li>Environments: Browser and Node.js</li> <li>Drupal: Drupal 10 and 11</li> </ul> <p>For CORS and cookie-based sessions, see CORS and Authentication.</p>"},{"location":"guide/introduction/#contributing","title":"Contributing","text":"<p>We welcome issues and PRs on GitHub. For issue credit on Drupal.org, please use the Drupal issue queue<sup>1</sup></p> <ol> <li> <p>Issue queue on Drupal.org for Drupal JS SDK: https://www.drupal.org/project/issues/drupal_js_sdk?categories=All \u21a9</p> </li> </ol>"},{"location":"guide/menu/","title":"Menu (draft)","text":"<p>Drupal JavaScript SDK relies on the Drupal module Decoupled Menus.</p>"},{"location":"guide/menu/#basic-usage","title":"Basic Usage","text":"JavaScript<pre><code>import { DrupalSDK } from \"drupal-js-sdk\";\n\nconst sdk = new DrupalSDK({ baseURL: \"http://example.com\" });\nconst menu = sdk.menu;\n\nlet menuTreeData = [];\n\n// Fetch `main` menu in Drupal.\nmenu\n  .list(\"main\")\n  .then((data) =&gt; {\n    menuTreeData = data;\n  })\n  .catch(() =&gt; {\n    // Handle error.\n  });\n</code></pre> <p>To get the flat menu data as returned from Drupal, use <code>raw</code> (alias for <code>getMenuRaw</code>):</p> JavaScript<pre><code>menu\n  .raw(\"main\")\n  .then((res) =&gt; {\n    menuData = res.data;\n  })\n  .catch(() =&gt; {\n    // Handle error.\n  });\n</code></pre>"},{"location":"guide/menu/#example-data-structure","title":"Example data structure","text":"JSON<pre><code>[\n  {\n    \"id\": \"main.000\",\n    \"parentId\": \"0\",\n    \"name\": \"Home\",\n    \"href\": \"/\",\n    \"level\": 1,\n    \"items\": []\n  },\n  {\n    \"id\": \"main.001\",\n    \"parentId\": \"0\",\n    \"name\": \"About\",\n    \"href\": \"/about-us\",\n    \"level\": 1,\n    \"items\": []\n  },\n  {\n    \"id\": \"main.002\",\n    \"parentId\": \"0\",\n    \"name\": \"Foo\",\n    \"href\": \"\",\n    \"level\": 1,\n    \"items\": [\n      {\n        \"id\": \"main.002.000\",\n        \"parentId\": \"main.002\",\n        \"name\": \"Bar\",\n        \"href\": \"\",\n        \"level\": 2,\n        \"items\": []\n      },\n      {\n        \"id\": \"main.002.001\",\n        \"parentId\": \"main.002\",\n        \"name\": \"Baz\",\n        \"href\": \"\",\n        \"level\": 2,\n        \"items\": []\n      }\n    ]\n  }\n]\n</code></pre>"},{"location":"modules/base/core/","title":"@drupal-js-sdk/core","text":""},{"location":"modules/base/core/#overview","title":"Overview","text":"<p>Base SDK used by all features. Manages configuration, HTTP client, and exposes shared services for other packages.</p>"},{"location":"modules/base/core/#usage","title":"Usage","text":"JavaScript<pre><code>import { Drupal } from \"@drupal-js-sdk/core\";\n\nconst drupal = new Drupal({ baseURL: \"https://example.com\" });\n// Set a header for all subsequent requests\ndrupal.getClientService().addDefaultHeaders({ \"X-App\": \"docs\" });\n</code></pre>"},{"location":"modules/base/core/#public-api","title":"Public API","text":""},{"location":"modules/base/core/#class-core","title":"class <code>Core</code>","text":""},{"location":"modules/base/core/#constructor","title":"Constructor","text":"<p>Instantiate Core</p> <pre><code>constructor(config: StorageRecordInterface)\n</code></pre> Example JavaScript<pre><code>import { Core } from \"@drupal-js-sdk/core\";\n\nconst drupal = new Core({ baseURL: \"https://example.com\" });\n// Set a header for all subsequent requests\ndrupal.getClientService().addDefaultHeaders({ \"X-App\": \"docs\" });\n</code></pre>"},{"location":"modules/base/core/#setconfigservice","title":"setConfigService","text":"<pre><code>setConfigService(config: StorageInterface): this\n</code></pre> Example JavaScript<pre><code>import { Core } from \"@drupal-js-sdk/core\";\nimport { StorageInMemory } from \"@drupal-js-sdk/storage\";\n\nconst core = new Core({});\ncore.setConfigService(new StorageInMemory());\n</code></pre>"},{"location":"modules/base/core/#getconfigservice","title":"getConfigService","text":"<pre><code>getConfigService(): StorageInterface\n</code></pre> Example JavaScript<pre><code>const cfg = drupal.getConfigService();\ncfg.setString(\"lang\", \"en\");\n</code></pre>"},{"location":"modules/base/core/#setclientservice","title":"setClientService","text":"<pre><code>setClientService(client: XhrInterface): this\n</code></pre> Example JavaScript<pre><code>import { FetchClient } from \"@drupal-js-sdk/xhr\";\n\nconst client = new FetchClient({ baseURL: \"https://example.com\" });\ndrupal.setClientService(client);\n</code></pre>"},{"location":"modules/base/core/#getclientservice","title":"getClientService","text":"<pre><code>getClientService(): XhrInterface\n</code></pre> Example JavaScript<pre><code>const client = drupal.getClientService();\nconst res = await client.call(\"GET\", \"/jsonapi/node/article\");\n</code></pre>"},{"location":"modules/base/core/#setsessionservice","title":"setSessionService","text":"<pre><code>setSessionService(session: SessionInterface): this\n</code></pre> Example JavaScript<pre><code>// Provide your own SessionInterface implementation\ndrupal.setSessionService(mySession);\n</code></pre>"},{"location":"modules/base/core/#getsessionservice","title":"getSessionService","text":"<pre><code>getSessionService(): SessionInterface\n</code></pre> Example JavaScript<pre><code>const session = drupal.getSessionService();\nsession.setItem(\"token\", { value: \"abc\" });\n</code></pre>"},{"location":"modules/base/core/#class-drupal-extends-core","title":"class <code>Drupal</code> extends <code>Core</code>","text":""},{"location":"modules/base/core/#constructor_1","title":"Constructor","text":"<pre><code>constructor(config: {\n  baseURL: string;\n  auth?: XhrBasicCredentials;\n  headers?: XhrRequestHeaders;\n  client?: XhrInterface;\n})\n</code></pre> Example JavaScript<pre><code>import { Drupal } from \"@drupal-js-sdk/core\";\n\nconst drupal = new Drupal({\n  baseURL: \"https://example.com\",\n  headers: { \"X-App\": \"docs\" },\n});\n</code></pre>"},{"location":"modules/base/core/#initialize","title":"initialize","text":"<pre><code>initialize(options): this\n</code></pre> Example JavaScript<pre><code>drupal.initialize({ baseURL: \"https://example.com\" });\n</code></pre> <p>Notes</p> <ul> <li>Provides shared configuration, HTTP client, and session plumbing.</li> </ul>"},{"location":"modules/base/error/","title":"@drupal-js-sdk/error","text":""},{"location":"modules/base/error/#overview","title":"Overview","text":"<p>Shared error primitive with stable codes for consistent error handling across SDK packages.</p>"},{"location":"modules/base/error/#usage","title":"Usage","text":"JavaScript<pre><code>import { DrupalError } from \"@drupal-js-sdk/error\";\n\ntry {\n  throw new DrupalError(DrupalError.INVALID_JSON, \"Malformed response\");\n} catch (e) {\n  if (e instanceof DrupalError) {\n    console.log(e.getErrorCode());\n  }\n}\n</code></pre>"},{"location":"modules/base/error/#public-api","title":"Public API","text":""},{"location":"modules/base/error/#class-drupalerror-extends-error","title":"class <code>DrupalError</code> extends <code>Error</code>","text":""},{"location":"modules/base/error/#constructor","title":"Constructor","text":"<pre><code>constructor(code: number, message: string)\n</code></pre>"},{"location":"modules/base/error/#static-codes-subset","title":"static codes (subset)","text":"<pre><code>DrupalError.CONNECTION_FAILED;\nDrupalError.INVALID_JSON;\nDrupalError.MISSING_IMPLEMENTATION_ERROR;\nDrupalError.STORAGE_IN_MEMORY_FAIL;\nDrupalError.STORAGE_IN_WEB_FAIL;\n</code></pre>"},{"location":"modules/base/error/#geterrorcode","title":"getErrorCode","text":"<pre><code>getErrorCode(): number\n</code></pre> <p>Notes</p> <ul> <li>Thrown by SDK modules; check <code>getErrorCode()</code> for handling.</li> </ul>"},{"location":"modules/base/interfaces/","title":"@drupal-js-sdk/interfaces","text":""},{"location":"modules/base/interfaces/#overview","title":"Overview","text":"<p>Canonical TypeScript interfaces used across the SDK to guarantee compatibility between packages.</p>"},{"location":"modules/base/interfaces/#usage","title":"Usage","text":"JavaScript<pre><code>import type { XhrInterface, CoreInterface, EntityIdentifier } from \"@drupal-js-sdk/interfaces\";\n\nconst id = { entity: \"node\", bundle: \"article\" };\n// Use types to annotate your code or implement custom adapters.\n</code></pre>"},{"location":"modules/base/interfaces/#public-api-types","title":"Public API (types)","text":""},{"location":"modules/base/interfaces/#xhr","title":"xhr","text":"<ul> <li><code>XhrInterface</code> </li> <li><code>XhrRequestConfig</code></li> <li><code>XhrResponse</code></li> <li><code>XhrMethod</code></li> <li>headers/params types</li> </ul>"},{"location":"modules/base/interfaces/#client","title":"client","text":"<p>high-level client-related types</p>"},{"location":"modules/base/interfaces/#core","title":"core","text":"<ul> <li><code>CoreInterface</code></li> </ul>"},{"location":"modules/base/interfaces/#error","title":"error","text":"<ul> <li><code>DrupalErrorInterface</code></li> </ul>"},{"location":"modules/base/interfaces/#session","title":"session","text":"<ul> <li><code>SessionInterface</code></li> </ul>"},{"location":"modules/base/interfaces/#storage","title":"storage","text":"<ul> <li><code>StorageInterface</code></li> <li><code>StorageRecordInterface</code></li> <li><code>StorageValueType</code></li> </ul>"},{"location":"modules/base/interfaces/#entity","title":"entity","text":"<ul> <li><code>EntityIdentifier</code></li> <li><code>EntityAttributes</code></li> <li><code>EntityRecord</code></li> <li><code>EntityLoadOptions</code></li> <li><code>EntityAdapter*</code></li> <li><code>EntityAdapterContext</code></li> </ul>"},{"location":"modules/base/interfaces/#notes","title":"Notes","text":"<ul> <li>Consumed across all packages to keep public contracts consistent and decoupled.</li> </ul>"},{"location":"modules/base/storage/","title":"@drupal-js-sdk/storage","text":""},{"location":"modules/base/storage/#overview","title":"Overview","text":"<p>Simple storage adapters for in-memory and Web Storage use cases. Useful for persisting session/config data across requests.</p>"},{"location":"modules/base/storage/#usage","title":"Usage","text":"JavaScript<pre><code>import { StorageInMemory, StorageInWeb } from \"@drupal-js-sdk/storage\";\n\nconst mem = new StorageInMemory();\nmem.setItem(\"token\", { value: \"abc\" });\n\nconst web = new StorageInWeb(() =&gt; window.localStorage);\nweb.setString(\"app\", \"docs\");\n</code></pre>"},{"location":"modules/base/storage/#public-api","title":"Public API","text":""},{"location":"modules/base/storage/#class-storageinmemory","title":"class <code>StorageInMemory</code>","text":""},{"location":"modules/base/storage/#constructor","title":"Constructor","text":"<pre><code>constructor();\n</code></pre>"},{"location":"modules/base/storage/#getstring","title":"getString","text":"<pre><code>getString(keyName: string): string | null\n</code></pre>"},{"location":"modules/base/storage/#setstring","title":"setString","text":"<pre><code>setString(keyName: string, keyValue: string): void\n</code></pre>"},{"location":"modules/base/storage/#isavailable","title":"isAvailable","text":"<pre><code>isAvailable(): boolean\n</code></pre>"},{"location":"modules/base/storage/#getitem","title":"getItem","text":"<pre><code>getItem(keyName: string): StorageValueType\n</code></pre>"},{"location":"modules/base/storage/#setitem","title":"setItem","text":"<pre><code>setItem(keyName: string, keyValue: StorageValueType): void\n</code></pre>"},{"location":"modules/base/storage/#removeitem","title":"removeItem","text":"<pre><code>removeItem(keyName: string): void\n</code></pre>"},{"location":"modules/base/storage/#clear","title":"clear","text":"<pre><code>clear(): void\n</code></pre>"},{"location":"modules/base/storage/#get","title":"get","text":"<pre><code>get(): StorageRecordInterface\n</code></pre>"},{"location":"modules/base/storage/#set","title":"set","text":"<pre><code>set(data: StorageRecordInterface): void\n</code></pre>"},{"location":"modules/base/storage/#class-storageinweb","title":"class <code>StorageInWeb</code>","text":""},{"location":"modules/base/storage/#constructor_1","title":"Constructor","text":"<pre><code>constructor(getStorage?: () =&gt; Storage)\n</code></pre>"},{"location":"modules/base/storage/#getstring_1","title":"getString","text":"<pre><code>getString(keyName: string): string | null\n</code></pre>"},{"location":"modules/base/storage/#setstring_1","title":"setString","text":"<pre><code>setString(keyName: string, keyValue: string): void\n</code></pre>"},{"location":"modules/base/storage/#isavailable_1","title":"isAvailable","text":"<pre><code>isAvailable(): boolean\n</code></pre>"},{"location":"modules/base/storage/#getitem_1","title":"getItem","text":"<pre><code>getItem(keyName: string): StorageValueType\n</code></pre>"},{"location":"modules/base/storage/#setitem_1","title":"setItem","text":"<pre><code>setItem(keyName: string, keyValue: StorageValueType): void\n</code></pre>"},{"location":"modules/base/storage/#removeitem_1","title":"removeItem","text":"<pre><code>removeItem(keyName: string): void\n</code></pre>"},{"location":"modules/base/storage/#clear_1","title":"clear","text":"<pre><code>clear(): void\n</code></pre>"},{"location":"modules/base/storage/#get_1","title":"get","text":"<pre><code>get(): StorageRecordInterface\n</code></pre>"},{"location":"modules/base/storage/#set_1","title":"set","text":"<pre><code>set(data: StorageRecordInterface): void\n</code></pre> <p>Notes</p> <ul> <li>Implements <code>StorageInterface</code> from <code>@drupal-js-sdk/interfaces</code>.</li> </ul>"},{"location":"modules/base/xhr/","title":"@drupal-js-sdk/xhr","text":""},{"location":"modules/base/xhr/#overview","title":"Overview","text":"<p>HTTP client abstractions with a unified interface, supporting native fetch or Axios. Used by all SDK packages for requests.</p>"},{"location":"modules/base/xhr/#usage","title":"Usage","text":"JavaScript<pre><code>import { FetchClient } from \"@drupal-js-sdk/xhr\";\n\nconst client = new FetchClient({ baseURL: \"https://example.com\" }).addDefaultHeaders({\n  \"X-App\": \"docs\",\n});\n\nconst response = await client.call(\"GET\", \"/jsonapi/node/article\");\n</code></pre>"},{"location":"modules/base/xhr/#public-api","title":"Public API","text":""},{"location":"modules/base/xhr/#class-fetchclient-implements-xhrinterface","title":"class <code>FetchClient</code> implements <code>XhrInterface</code>","text":""},{"location":"modules/base/xhr/#constructor","title":"Constructor","text":"<pre><code>constructor(config?: XhrRequestConfig)\n</code></pre>"},{"location":"modules/base/xhr/#setclient","title":"setClient","text":"<pre><code>setClient(client: typeof fetch): this\n</code></pre>"},{"location":"modules/base/xhr/#getclient","title":"getClient","text":"<pre><code>getClient(): typeof fetch\n</code></pre>"},{"location":"modules/base/xhr/#adddefaultheaders","title":"addDefaultHeaders","text":"<pre><code>addDefaultHeaders(headers: Record&lt;string, any&gt;): XhrInterface\n</code></pre> Example JavaScript<pre><code>client.addDefaultHeaders({ Authorization: \"Bearer token\" });\n</code></pre>"},{"location":"modules/base/xhr/#call","title":"call","text":"<pre><code>call(method: XhrMethod, path: string, config?: XhrRequestConfig): Promise&lt;XhrResponse&gt;\n</code></pre> Example JavaScript<pre><code>const res = await client.call(\"GET\", \"/jsonapi/node/article\");\n</code></pre>"},{"location":"modules/base/xhr/#class-axiosclient-implements-xhrinterface","title":"class <code>AxiosClient</code> implements <code>XhrInterface</code>","text":""},{"location":"modules/base/xhr/#constructor_1","title":"Constructor","text":"<pre><code>constructor(client: { request(config: XhrRequestConfig): Promise&lt;XhrResponse&gt; })\n</code></pre>"},{"location":"modules/base/xhr/#setclient_1","title":"setClient","text":"<pre><code>setClient(client: { request(config: XhrRequestConfig): Promise&lt;XhrResponse&gt; }): this\n</code></pre>"},{"location":"modules/base/xhr/#getclient_1","title":"getClient","text":"<pre><code>getClient(): { request(config: XhrRequestConfig): Promise&lt;XhrResponse&gt; }\n</code></pre>"},{"location":"modules/base/xhr/#adddefaultheaders_1","title":"addDefaultHeaders","text":"<pre><code>addDefaultHeaders(headers: Record&lt;string, any&gt;): XhrInterface\n</code></pre>"},{"location":"modules/base/xhr/#call_1","title":"call","text":"<pre><code>call(method: XhrMethod, path: string, config?: Record&lt;string, any&gt;): Promise&lt;XhrResponse&gt;\n</code></pre> <p>Notes</p> <ul> <li>Both clients adhere to <code>XhrInterface</code> from <code>@drupal-js-sdk/interfaces</code>.</li> </ul>"},{"location":"modules/feature/auth/","title":"@drupal-js-sdk/auth","text":""},{"location":"modules/feature/auth/#overview","title":"Overview","text":"<p>Helpers for Drupal core session endpoints: session token, login, logout, password reset and registration. It relies on the configured HTTP client/session in your <code>Drupal</code> instance.</p>"},{"location":"modules/feature/auth/#usage","title":"Usage","text":"JavaScript<pre><code>import { Drupal } from \"@drupal-js-sdk/core\";\nimport { DrupalAuth } from \"@drupal-js-sdk/auth\";\n\nconst drupal = new Drupal({ baseURL: \"https://example.com\" });\nconst auth = new DrupalAuth(drupal);\n\nawait auth.getSessionToken();\nconst isLoggedIn = await auth.loginStatus();\nif (!isLoggedIn) {\n  await auth.login(\"username\", \"password\");\n}\n</code></pre>"},{"location":"modules/feature/auth/#public-api","title":"Public API","text":""},{"location":"modules/feature/auth/#class-drupalauth","title":"class <code>DrupalAuth</code>","text":""},{"location":"modules/feature/auth/#constructor","title":"Constructor","text":"<pre><code>constructor(drupal: Drupal)\n</code></pre> Example JavaScript<pre><code>import { Drupal } from \"@drupal-js-sdk/core\";\nimport { DrupalAuth } from \"@drupal-js-sdk/auth\";\n\nconst drupal = new Drupal({ baseURL: \"https://example.com\" });\nconst auth = new DrupalAuth(drupal);\n</code></pre>"},{"location":"modules/feature/auth/#getsessiontoken","title":"getSessionToken","text":"<pre><code>getSessionToken(): Promise&lt;XhrResponse&gt;\n</code></pre> Example JavaScript<pre><code>await auth.getSessionToken();\n</code></pre>"},{"location":"modules/feature/auth/#login","title":"login","text":"<pre><code>login(name: string, pass: string): Promise&lt;XhrResponse&gt;\n</code></pre> Example JavaScript<pre><code>await auth.login(\"username\", \"password\");\n</code></pre>"},{"location":"modules/feature/auth/#loginstatus","title":"loginStatus","text":"<pre><code>loginStatus(): Promise&lt;boolean&gt;\n</code></pre> Example JavaScript<pre><code>const isLoggedIn = await auth.loginStatus();\n</code></pre>"},{"location":"modules/feature/auth/#logout","title":"logout","text":"<pre><code>logout(): Promise&lt;XhrResponse&gt;\n</code></pre> Example JavaScript<pre><code>await auth.logout();\n</code></pre>"},{"location":"modules/feature/auth/#passwordresetbyusername","title":"passwordResetByUserName","text":"<pre><code>passwordResetByUserName(name: string): Promise&lt;XhrResponse&gt;\n</code></pre> Example JavaScript<pre><code>await auth.passwordResetByUserName(\"username\");\n</code></pre>"},{"location":"modules/feature/auth/#passwordresetbymail","title":"passwordResetByMail","text":"<pre><code>passwordResetByMail(mail: string): Promise&lt;XhrResponse&gt;\n</code></pre> Example JavaScript<pre><code>await auth.passwordResetByMail(\"user@example.com\");\n</code></pre>"},{"location":"modules/feature/auth/#register","title":"register","text":"<pre><code>register(name: string, mail: string): Promise&lt;XhrResponse&gt;\n</code></pre> Example JavaScript<pre><code>await auth.register(\"newuser\", \"newuser@example.com\");\n</code></pre> <p>Notes</p> <ul> <li>Uses HTTP client and session from the provided <code>Drupal</code> instance.</li> <li>Errors are <code>DrupalError</code> with <code>getErrorCode()</code>.</li> </ul>"},{"location":"modules/feature/entity/","title":"@drupal-js-sdk/entity","text":""},{"location":"modules/feature/entity/#overview","title":"Overview","text":"<p>Adapter-based entity loader. Register one or more adapters (e.g., JSON:API) and load entities via a single, consistent facade.</p>"},{"location":"modules/feature/entity/#usage","title":"Usage","text":"JavaScript<pre><code>import { Drupal } from \"@drupal-js-sdk/core\";\nimport { DrupalEntity } from \"@drupal-js-sdk/entity\";\nimport { JsonApiEntityAdapter } from \"@drupal-js-sdk/jsonapi\";\n\nconst drupal = new Drupal({ baseURL: \"https://example.com\" });\nconst entities = new DrupalEntity(drupal)\n  .registerAdapter(\"jsonapi\", (ctx) =&gt; new JsonApiEntityAdapter(ctx))\n  .setDefaultAdapter(\"jsonapi\");\n\n// Optionally type attributes in TS; in JS just call load\nconst loader = entities.entity({ entity: \"node\", bundle: \"article\" });\nconst article = await loader.load(\"123\");\n</code></pre>"},{"location":"modules/feature/entity/#public-api","title":"Public API","text":""},{"location":"modules/feature/entity/#class-entityloadert","title":"class <code>EntityLoader&lt;T&gt;</code>","text":""},{"location":"modules/feature/entity/#load","title":"load","text":"<pre><code>load(id: string, options?: EntityLoadOptions): Promise&lt;EntityRecord&lt;T&gt;&gt;\n</code></pre> Example JavaScript<pre><code>const node = await loader.load(\"1\", { jsonapi: { query: { include: \"uid\" } } });\n</code></pre>"},{"location":"modules/feature/entity/#class-entityservice","title":"class <code>EntityService</code>","text":""},{"location":"modules/feature/entity/#constructor","title":"Constructor","text":"<pre><code>constructor(drupal: CoreInterface)\n</code></pre>"},{"location":"modules/feature/entity/#registeradapter","title":"registerAdapter","text":"<pre><code>registerAdapter(key: string, factory: EntityAdapterFactory): this\n</code></pre> Example JavaScript<pre><code>service.registerAdapter(\"jsonapi\", (ctx) =&gt; new JsonApiEntityAdapter(ctx));\n</code></pre>"},{"location":"modules/feature/entity/#setdefaultadapter","title":"setDefaultAdapter","text":"<pre><code>setDefaultAdapter(key: string): this\n</code></pre> Example JavaScript<pre><code>service.setDefaultAdapter(\"jsonapi\");\n</code></pre>"},{"location":"modules/feature/entity/#entity","title":"entity","text":"<pre><code>entity&lt;T&gt;(id: EntityIdentifier, adapterKey?: string): EntityLoader&lt;T&gt;\n</code></pre> Example JavaScript<pre><code>const loader = service.entity({ entity: \"node\", bundle: \"page\" }, \"jsonapi\");\n</code></pre>"},{"location":"modules/feature/entity/#class-drupalentity-facade","title":"class <code>DrupalEntity</code> (facade)","text":""},{"location":"modules/feature/entity/#constructor_1","title":"Constructor","text":"<pre><code>constructor(drupal: CoreInterface)\n</code></pre>"},{"location":"modules/feature/entity/#registeradapter_1","title":"registerAdapter","text":"<pre><code>registerAdapter(key: string, factory: EntityAdapterFactory): this\n</code></pre>"},{"location":"modules/feature/entity/#setdefaultadapter_1","title":"setDefaultAdapter","text":"<pre><code>setDefaultAdapter(key: string): this\n</code></pre>"},{"location":"modules/feature/entity/#entity_1","title":"entity","text":"<pre><code>entity&lt;T&gt;(id: EntityIdentifier, adapterKey?: string): EntityLoader&lt;T&gt;\n</code></pre> <p>Types</p> <ul> <li><code>EntityIdentifier</code>, <code>EntityAttributes</code>, <code>EntityRecord</code>, <code>EntityLoadOptions</code></li> <li><code>EntityAdapterContext</code>, <code>EntityAdapter</code>, <code>EntityAdapterFactory</code></li> </ul> <p>Notes</p> <ul> <li>Adapters encapsulate backend specifics (e.g., JSON:API).</li> <li>Uses the HTTP client and config from the provided <code>CoreInterface</code>.</li> </ul>"},{"location":"modules/feature/jsonapi/","title":"@drupal-js-sdk/jsonapi","text":""},{"location":"modules/feature/jsonapi/#overview","title":"Overview","text":"<p>Entity adapter that loads records from Drupal's JSON:API using the shared XHR client. Normalizes minimal shape: id, type, attributes, relationships.</p>"},{"location":"modules/feature/jsonapi/#usage","title":"Usage","text":"JavaScript<pre><code>import { Drupal } from \"@drupal-js-sdk/core\";\nimport { EntityService } from \"@drupal-js-sdk/entity\";\nimport { JsonApiEntityAdapter } from \"@drupal-js-sdk/jsonapi\";\n\nconst drupal = new Drupal({ baseURL: \"https://example.com\" });\nconst service = new EntityService(drupal).registerAdapter(\n  \"jsonapi\",\n  (ctx) =&gt; new JsonApiEntityAdapter(ctx)\n);\n\nconst loader = service.entity({ entity: \"node\", bundle: \"page\" }, \"jsonapi\");\nconst page = await loader.load(\"abcd\", { jsonapi: { query: { include: \"uid\" } } });\n</code></pre>"},{"location":"modules/feature/jsonapi/#public-api","title":"Public API","text":""},{"location":"modules/feature/jsonapi/#class-jsonapientityadaptert","title":"class <code>JsonApiEntityAdapter&lt;T&gt;</code>","text":""},{"location":"modules/feature/jsonapi/#constructor","title":"Constructor","text":"<pre><code>constructor(context: EntityAdapterContext)\n</code></pre> Example JavaScript<pre><code>const adapter = new JsonApiEntityAdapter(context);\n</code></pre>"},{"location":"modules/feature/jsonapi/#load","title":"load","text":"<pre><code>load(entityId: string, options?: EntityLoadOptions): Promise&lt;EntityRecord&lt;T&gt;&gt;\n</code></pre> Example JavaScript<pre><code>const record = await adapter.load(\"123\", { jsonapi: { query: { include: \"uid\" } } });\n</code></pre> <p>Alias</p> <ul> <li><code>Adapter = JsonApiEntityAdapter</code></li> </ul> <p>Notes</p> <ul> <li>Implements the EntityAdapter interface for JSON:API.</li> <li>Respects query options: <code>options.jsonapi.query</code> or generic <code>options.params</code>.</li> </ul>"},{"location":"modules/feature/menu/","title":"@drupal-js-sdk/menu","text":""},{"location":"modules/feature/menu/#overview","title":"Overview","text":"<p>Fetches Drupal menu linkset and returns a normalized tree suitable for rendering. Also exposes helpers for validation and transformation.</p>"},{"location":"modules/feature/menu/#usage","title":"Usage","text":"JavaScript<pre><code>import { Drupal } from \"@drupal-js-sdk/core\";\nimport { DrupalMenu } from \"@drupal-js-sdk/menu\";\n\nconst drupal = new Drupal({ baseURL: \"https://example.com\" });\nconst menu = new DrupalMenu(drupal);\nconst items = await menu.getMenu(\"main\");\n</code></pre>"},{"location":"modules/feature/menu/#public-api","title":"Public API","text":""},{"location":"modules/feature/menu/#class-drupalmenu","title":"class <code>DrupalMenu</code>","text":""},{"location":"modules/feature/menu/#constructor","title":"Constructor","text":"<pre><code>constructor(drupal: CoreInterface)\n</code></pre>"},{"location":"modules/feature/menu/#getmenu","title":"getMenu","text":"<pre><code>getMenu(menuName: string): Promise&lt;any[]&gt;\n</code></pre> Example JavaScript<pre><code>const items = await menu.getMenu(\"main\");\n</code></pre>"},{"location":"modules/feature/menu/#getmenuraw","title":"getMenuRaw","text":"<pre><code>getMenuRaw(menuName: string): Promise&lt;any&gt;\n</code></pre>"},{"location":"modules/feature/menu/#normalizelistitems","title":"normalizeListItems","text":"<pre><code>normalizeListItems(data: object): any[]\n</code></pre>"},{"location":"modules/feature/menu/#convertflatlistitemstotree","title":"convertFlatListItemsToTree","text":"<pre><code>convertFlatListItemsToTree(list: any[]): any[]\n</code></pre>"},{"location":"modules/feature/menu/#checkifdrupalmenudataisvalid","title":"checkIfDrupalMenuDataIsValid","text":"<pre><code>checkIfDrupalMenuDataIsValid(data?: object): boolean\n</code></pre> <p>Notes</p> <ul> <li>Uses the HTTP client from <code>CoreInterface</code> and returns a normalized tree.</li> </ul>"},{"location":"modules/feature/role/","title":"@drupal-js-sdk/role","text":""},{"location":"modules/feature/role/#overview","title":"Overview","text":"<p>Experimental scaffold for role-related utilities. API may change; currently not providing stable methods.</p>"},{"location":"modules/feature/role/#usage","title":"Usage","text":"JavaScript<pre><code>import { DrupalRole } from \"@drupal-js-sdk/role\";\n// Placeholder: API is experimental and may change.\n</code></pre> <p>Public API</p> <ul> <li>class DrupalRole</li> <li>constructor()</li> <li>(methods are currently placeholders and throw; subject to future expansion)</li> </ul> <p>Notes</p> <ul> <li>Package scaffold for role-related utilities. Methods intentionally minimal.</li> </ul>"},{"location":"modules/feature/settings/","title":"@drupal-js-sdk/settings","text":""},{"location":"modules/feature/settings/#overview","title":"Overview","text":"<p>Experimental scaffold for application settings helpers. API may change; currently not providing stable methods.</p>"},{"location":"modules/feature/settings/#usage","title":"Usage","text":"JavaScript<pre><code>import { DrupalSettings } from \"@drupal-js-sdk/settings\";\n</code></pre> <p>Public API</p> <ul> <li>class DrupalSettings</li> <li>constructor()</li> <li>(methods are currently placeholders and throw; subject to future expansion)</li> </ul> <p>Notes</p> <ul> <li>Package scaffold for settings-related utilities. Methods intentionally minimal.</li> </ul>"}]}